Qualifying to Pre-Elimination:

Snackdown 2019 is coming! There are two rounds (round A and round B) after the qualification round. From both of them, teams can qualify to the pre-elimination round. According to the rules, in each of these two rounds, teams are sorted in descending order by their score and each team with a score greater or equal to the score of the team at the K=1500-th place advances to the pre-elimination round (this means it is possible to have more than K qualified teams from each round in the case of one or more ties after the K-th place).

Today, the organisers ask you to count the number of teams which would qualify for the pre-elimination round from round A for a given value of K (possibly different from 1500). They provided the scores of all teams to you; you should ensure that all teams scoring at least as many points as the K-th team qualify.

Input
The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
The first line of each test case contains two space-separated integers N and K.
The second line contains N space-separated integers S1,S2,…,SN.
Output
For each test case, print a single line containing one integer — the number of qualified teams.

Constraints
1≤T≤1,000
1≤K≤N≤10^5
1≤Si≤10^9 for each valid i
the sum of N for all test cases does not exceed 10^6
Example Input
2
5 1
3 5 2 4 5
6 4
6 5 4 3 2 1
Example Output
2
4
 Source code :
#include <stdio.h>
int n;
void mergeSort(int *a, int beg, int end){
	int mid;
	if(beg < end){
		mid = (beg+end)/2;
		mergeSort(a, beg, mid);
		mergeSort(a, mid+1, end);
		mergeSortedArray(a, beg, mid, mid+1, end);
	}
}

void mergeSortedArray(int *a, int lbeg, int lend, int rbeg, int rend){
	int pa = lbeg, pb = rbeg, pt = lbeg, tmp[n];
	while(pa <= lend && pb <= rend){
		if(a[pa] > a[pb]){
			tmp[pt++] = a[pa++];
		}else{
			tmp[pt++] = a[pb++];
		}
	}
	if(pa > lend){
		while(pb <= rend){
			tmp[pt++] = a[pb++];
		}
	}else{
		while(pa <= lend){
			tmp[pt++] = a[pa++];
		}
	}
	
	for(pt = lbeg; pt <= rend; pt++){
		a[pt] = tmp[pt];
	}
}
int main ()
{
	int t;
	scanf("%d",&t);
	while(t--) {
		int i,j,k,m,count = 0;
		scanf("%d %d",&n, &k);
		int s[n];
		for(i=0;i<n;i++)
			scanf("%d",&s[i]);
		/*
		// Insertion sort
		for (i=0; i<n; i++) {
        	for (j=0; j<=i; j++) {
            	if (s[j]<s[i]) {
                	m=s[j];
                	s[j]=s[i];
                	s[i]=m;
            	}
        	}
    	}
    	// there is TLE in insertion sort.
    	*/
    	mergeSort(s, 0, n-1);
		for(i=0;i<n;i++) {
			if(s[i]>=s[k-1])
				count++;
		}
		printf("%d\n",count);
	}
	return 0;
}





Chef and Semi-Primes:

Chef likes prime numbers. However, there is one thing he loves even more. Of course, it's semi-primes! A semi-prime number is an integer which can be expressed as a product of two distinct primes. For example, 15=3⋅5 is a semi-prime number, but 1, 9=3⋅3 and 5 are not.

Chef is wondering how to check if an integer can be expressed as a sum of two (not necessarily distinct) semi-primes. Help Chef with this tough task!

Input
The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
The first and only line of each test case contains a single integer N.
Output
For each test case, print a single line containing the string "YES" if it is possible to express N as a sum of two semi-primes or "NO" otherwise.

Constraints
1≤T≤200
1≤N≤200

Example Input
3
30
45
62

Example Output
YES
YES
NO

Explanation
Example case 1: N=30 can be expressed as 15+15=(3⋅5)+(3⋅5).

Example case 2: 45 can be expressed as 35+10=(5⋅7)+(2⋅5).

Example case 3: 62 cannot be expressed as a sum of two semi-primes.

 source code :
#include <stdio.h>
 
int sp[200], k = 0;
void semiprime(int n)
{
    int count = 0, temp = n;
   
    for (int i = 2; count < 2 && i * i <= temp; ++i)
        while (temp % i == 0)
            temp /= i, ++count;
    if (n > 1)
        ++count;
    if (count == 2) { 
        //printf("%d ",n);
        sp[k] = n; 
        k++;      
    }
}

int main()
{
    int t; 
    scanf("%d",&t);
    while(t--) {   
        k=0;	// Don't forget to reset "k".
        int n, i, j, flag = 0;
        scanf("%d",&n);  
        for (i=1; i<=n; i++) {
            semiprime(i);
        }
        for (i=0; i<k; i++) {
            for (j=i; j<k; j++) {
                if (sp[i] + sp[j] == n) {
			flag++;
			break;
		}
            } 
            if(flag) break;
        }
        if (flag)  
            printf("YES\n");
        else
            printf("NO\n");
    }
    return 0;
}





Spread the Word:

Snackdown 2019 is coming! People have started to spread the word and tell other people about the contest.

There are N people numbered 1 through N. Initially, only person 1 knows about Snackdown. On each day, everyone who already knows about Snackdown tells other people about it. For each valid i, person i can tell up to Ai people per day. People spread the information among the people who don't know about Snackdown in the ascending order of their indices; you may assume that no two people try to tell someone about Snackdown at the same moment. Each person is only allowed to start telling other people about Snackdown since the day after he/she gets to know about it (person 1 can start telling other people already on day 1). How many days does it take for all people to know about Snackdown?

Input
The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
The first line of each test case contains a single integer N.
The second line contains N space-separated integers A1,A2,…,AN.

Output
For each test case, print a single line containing one integer — the number of days.

Constraints
1≤T≤1,000
2≤N≤10^5	the sum of N for all test cases does not exceed 10^6
0≤Ai≤N	for each valid i
1≤A1

Example Input
2
7
2 1 1 5 5 5 5
5
5 1 3 2 1

Example Output
2
1

Explanation
Example case 1: On day 1, person 1 tells people 2 and 3 about Snackdown. On day 2, the first three people know about Snackdown, so they can tell 2+1+1=4 people about it in a single day. That means the last four people get to know about Snackdown on day 2, so the total number of days is 2.

Example case 2: On each day, person 1 can tell up to 5 people about Snackdown, so on the first day, he simply tells all people about it and the total number of days is 1.

 Source Code :





Chef and Operations:

Chef has two sequences A and B, each with length N. He can apply the following magic operation an arbitrary number of times (including zero): choose an index i (1≤i≤N−2) and add 1 to Ai, 2 to Ai+ and 3 to Ai+2, i.e. change Ai to Ai+1, Ai+1 to Ai+1+2 and Ai+2 to Ai+2+3.

Chef asks you to tell him if it is possible to obtain sequence B from sequence A this way. Help him!

Input
The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
The first line of each test case contains a single integer N.
The second line contains N space-separated integers A1,A2,…,AN.
The third line contains N space-separated integers B1,B2,…,BN.

Output
For each test case, print a single line containing the string "TAK" if it is possible to reach sequence B or "NIE" otherwise.

Constraints
1≤T≤1,000
1≤N≤105
0≤Ai≤108
 for each valid i
0≤Bi≤108
 for each valid i
the sum of N
 for all test cases does not exceed 5⋅105

Example Input
2
5
0 0 0 0 0 
1 2 4 2 3
5
0 0 0 0 0 
1 2 4 2 4

Example Output
TAK
NIE

Explanation
Example case 1: Chef can apply the operation at index i=3 and get the sequence (0,0,1,2,3). Afterwards, he can apply that operation at index i=1 and get the sequence (1,2,4,2,3)=B.

Example case 2: It is impossible to reach sequence B.





Finding Teammate:

Snackdown 2019 is coming! Since Snackdown is a contest of teams with up to two members, everyone is looking for a teammate. There are N contestants (numbered 1 through N) who want to participate in Snackdown; let's denote the skill level of the i-th contestant by Si. These people want to pair up in N/2 teams; each team should consist of two people.

Clearly everyone wishes for their teammate to be as skilled as possible, so everyone wants to maximize their teammate's skill level. We call a pairing (an unordered N/2-tuple of teams) valid if there are no two teams consisting of people (A,B) and (C,D) such that SD>SB and SA>SC — in that case, A and D would both prefer to be on the same team rather than with their current teammates.

Find the number of valid pairings. Since this number can be large, compute it modulo 1,000,000,007.

Input
The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
The first line of each test case contains a single integer N.
The second line contains N space-separated integers S1,S2,…,SN.

Output
For each test case, print a single line containing one integer — the number of valid pairings modulo 1,000,000,007.

Constraints
1≤T≤1,000
2≤N≤105
N
 is even
the sum of N
 for all test cases does not exceed 106
1≤Si≤106
 for each valid i

Example Input
2
4
1 7 3 8
4
2 3 2 2

Example Output
1
3

Explanation
Example case 1: The only valid pairing is for contestant 2 to be paired with contestant 4  (so contestants 1 and 3 form the other team).

Example case 2: Since person 2 has the highest skill level and all others have the same skill levels, person 2 can choose anyone among the other three as a teammate. The remaining two people also form a team, so the number of pairings is 3.